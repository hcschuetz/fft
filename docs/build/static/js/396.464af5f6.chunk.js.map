{"version":3,"file":"static/js/396.464af5f6.chunk.js","mappings":"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","sources":["../../fft-cpp/dst-js|lazy|/^/.*/.js$/|groupOptions: {}|strict namespace object","../../fft-cpp/dst-wasm|lazy|/^/.*/-wasm/.js$/|groupOptions: {}|strict namespace object","../../fft-mylang/dst-wasm|lazy|/^/.*/-wasm/.js$/|groupOptions: {}|strict namespace object","../../complex/src/Complex.ts","filledArray.ts","makeTestData.ts","sleep.ts","../../complex/src/ComplexArray.ts","../../fft-ts/src/fft01.ts","../../fft-ts/src/fft02.ts","../../fft-ts/src/fft03.ts","../../fft-ts/src/fft04.ts","../../fft-ts/src/fft05.ts","../../fft-ts/src/fft06.ts","../../fft-ts/src/fft07.ts","../../fft-ts/src/fft08.ts","../../fft-ts/src/fft09.ts","../../fft-ts/src/fft10.ts","../../fft-ts/src/fft11.ts","../../fft-ts/src/fft12.ts","../../fft-ts/src/fallbackFFT.ts","../../fft-ts/src/fft13.ts","../../base64/src/decodeBase64.ts","../../fft-ts/src/fft14.ts","../../fft-ts/src/fft14a.ts","../../fft-ts/src/fft14b.ts","../../fft-ts/src/fft15.ts","../../fft-ts/src/fft15a.ts","../../fft-ts/src/fft15b.ts","../../fft-ts/src/fft15c.ts","../../fft-ts/src/fft15d.ts","../../fft-ts/src/fft16.ts","../../fft-ts/src/fft40.ts","../../fft-ts/src/fft44.ts","../../fft-ts/src/fft47.ts","../../fft-ts/src/fft98.ts","../../fft-ts/src/fft98a.ts","../../fft-ts/src/fft99.ts","../../fft-ts/src/fft99a.ts","../../fft-ts/src/fft99b.ts","../../fft-ts/src/fft99c.ts","../../fft-ts/src/api.ts","../../fft-cpp/ts/fft-instance-utils.ts","../../fft-cpp/ts/info.ts","../../fft-cpp/ts/api-js.ts","../../fft-cpp/ts/makeHeap.ts","../../fft-cpp/ts/api-wasm.ts","../../fft-mylang/src/info.ts","../../fft-mylang/src/api.ts","prefixKeys.ts","mapObject.ts","asPromise.ts","versions.ts","benchmark-worker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["var map = {\n\t\"./fft01.js\": [\n\t\t5599,\n\t\t599\n\t],\n\t\"./fft02.js\": [\n\t\t3013,\n\t\t13\n\t],\n\t\"./fft44.js\": [\n\t\t9406,\n\t\t406\n\t],\n\t\"./fft47.js\": [\n\t\t2292,\n\t\t292\n\t],\n\t\"./fft47pointers.js\": [\n\t\t5203,\n\t\t203\n\t],\n\t\"./fft48.js\": [\n\t\t1917,\n\t\t917\n\t],\n\t\"./fft60.js\": [\n\t\t4144,\n\t\t144\n\t],\n\t\"./fft99b.js\": [\n\t\t81,\n\t\t81\n\t],\n\t\"./fft99c.js\": [\n\t\t4045,\n\t\t45\n\t],\n\t\"./fftKiss.js\": [\n\t\t1546,\n\t\t546\n\t],\n\t\"./fftKiss2.js\": [\n\t\t6716,\n\t\t716\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 1678;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./fft01-wasm.js\": [\n\t\t9206,\n\t\t206\n\t],\n\t\"./fft02-wasm.js\": [\n\t\t1498,\n\t\t498\n\t],\n\t\"./fft44-wasm.js\": [\n\t\t1539,\n\t\t539\n\t],\n\t\"./fft47-wasm.js\": [\n\t\t8136,\n\t\t136\n\t],\n\t\"./fft47pointers-wasm.js\": [\n\t\t8878,\n\t\t878\n\t],\n\t\"./fft48-wasm.js\": [\n\t\t1827,\n\t\t827\n\t],\n\t\"./fft60-wasm.js\": [\n\t\t4997,\n\t\t997\n\t],\n\t\"./fft99b-wasm.js\": [\n\t\t995,\n\t\t995\n\t],\n\t\"./fft99c-wasm.js\": [\n\t\t1553,\n\t\t553\n\t],\n\t\"./fftKiss-wasm.js\": [\n\t\t7830,\n\t\t830\n\t],\n\t\"./fftKiss2-wasm.js\": [\n\t\t2216,\n\t\t216\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 4548;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./fft60-wasm.js\": [\n\t\t8844,\n\t\t844\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 2112;\nmodule.exports = webpackAsyncContext;","export type Complex = {re: number, im: number};\r\n\r\nexport const plus = (x: Complex, y: Complex): Complex => ({\r\n  re: x.re + y.re,\r\n  im: x.im + y.im,\r\n});\r\n\r\nexport const minus = (x: Complex, y: Complex): Complex => ({\r\n  re: x.re - y.re,\r\n  im: x.im - y.im,\r\n});\r\n\r\nexport const times = (x: Complex, y: Complex): Complex => ({\r\n  re: x.re * y.re - x.im * y.im,\r\n  im: x.re * y.im + x.im * y.re,\r\n});\r\n\r\nexport const timesScalar = (x: Complex, y: number): Complex => ({\r\n  re: x.re * y,\r\n  im: x.im * y,\r\n});\r\n\r\nexport const conj = ({re, im}: Complex): Complex => ({\r\n  re: re,\r\n  im: -im,\r\n});\r\n\r\n/** multiply by i */\r\nexport const rot90 = ({re, im}: Complex): Complex => ({\r\n  re: -im,\r\n  im: re,\r\n});\r\n\r\n/** returns the norm (squared absolute value) of a complex number */\r\nexport const abs2 = (x: Complex): number => x.re**2 + x.im**2;\r\n\r\n/** returns the complex value `exp(i * x) = cos(x) + i * sin(x)` for a real number x */\r\nexport const expi = (x: number): Complex => ({\r\n  re: Math.cos(x),\r\n  im: Math.sin(x),\r\n});\r\n\r\nexport const randomComplex = (): Complex => ({\r\n  re: Math.random(),\r\n  im: Math.random(),\r\n});\r\n\r\nexport const zero: Complex = { re: 0, im: 0 };\r\nexport const one: Complex = { re: 1, im: 0 };\r\nexport const one_i: Complex = { re: 0, im: 1 };\r\n","const filledArray = <T,>(length: number, f: (i: number) => T): T[] =>\r\n  Array.from({length}, (_, i) => f(i));\r\n\r\nexport default filledArray;\r\n","import { randomComplex } from \"complex/dst/Complex\";\r\nimport filledArray from \"./filledArray\";\r\n\r\nconst makeTestData = (n: number) => filledArray(n, () => randomComplex());\r\n\r\nexport default makeTestData;\r\n","const sleep = (ms: number): Promise<undefined> =>\r\n  new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport default sleep;","import { Complex } from \"./Complex\";\r\n\r\n// Putting real parts and complex parts into separate Float64Arrays seems to be\r\n// slightly faster than a single Float64Array (with either interleaved real and\r\n// complex parts or with real and complex parts going to the first and second\r\n// half, respectively).\r\n\r\n// The two arrays are expected to be of equal size.\r\nexport type ComplexArray = {res: Float64Array, ims: Float64Array};\r\n\r\nexport const makeComplexArray = (n: number): ComplexArray => ({\r\n  res: new Float64Array(n),\r\n  ims: new Float64Array(n),\r\n});\r\n\r\nexport const complexArrayLength = (a: ComplexArray) => a.res.length;\r\n\r\nexport const getComplex = ({res, ims}: ComplexArray, i: number): Complex =>\r\n  ({re: res[i], im: ims[i]});\r\n\r\nexport const setComplex = ({res, ims}: ComplexArray, i: number, {re, im}: Complex): void => {\r\n  res[i] = re;\r\n  ims[i] = im;\r\n}\r\n\r\nexport const copyComplexArray = (src: ComplexArray, dst: ComplexArray) => {\r\n  dst.res.set(src.res);\r\n  dst.ims.set(src.ims);\r\n};\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray, complexArrayLength,\r\n  getComplex, setComplex, copyComplexArray,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\n/**\r\n * Straight-forward (mostly unoptimized) FFT implementation.\r\n * Performs FFT with `direction === 1` (default) or IFFT with `direction === -1`.\r\n * The size of `f` must be a power of 2.\r\n */\r\nexport function fft(f: ComplexArray, direction: number = 1): ComplexArray {\r\n  const len = complexArrayLength(f);\r\n  if (len === 1) {\r\n    return f;\r\n  } else {\r\n    const halfLen = len / 2;\r\n    const even = makeComplexArray(halfLen);\r\n    const odd  = makeComplexArray(halfLen);\r\n    for (let k = 0; k < halfLen; k++) {\r\n      setComplex(even, k, getComplex(f, 2 * k    ));\r\n      setComplex(odd , k, getComplex(f, 2 * k + 1));\r\n    }\r\n    const even_out = fft(even, direction);\r\n    const odd_out  = fft(odd , direction);\r\n    const out = makeComplexArray(len);\r\n    for (let k = 0; k < halfLen; k++) {\r\n      const e = getComplex(even_out, k);\r\n      const o = getComplex(odd_out , k);\r\n      const rotated = times(o, expi(-direction * TAU * k / len));\r\n      setComplex(out, k          , plus (e, rotated));\r\n      setComplex(out, k + halfLen, minus(e, rotated));\r\n    }\r\n    return out;\r\n  }\r\n}\r\n\r\n// For compatibility with the other implementations:\r\nexport const fft_prepare: FFTPrep = (/* n */) => {\r\n  return (f: ComplexArray, out: ComplexArray, direction: number = 1) =>\r\n    copyComplexArray(fft(f, direction), out);\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray, complexArrayLength,\r\n  getComplex, setComplex, copyComplexArray,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\n// This is what we would normally export at this stage:\r\nexport function fft_prepare_raw(n: number) {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n  return function fft(f: ComplexArray, direction: number = 1): ComplexArray {\r\n    const len = complexArrayLength(f);\r\n    if (len === 1) {\r\n      return f;\r\n    } else {\r\n      const rStride = direction * n / len;\r\n      const halfLen = len / 2;\r\n      const even = makeComplexArray(halfLen);\r\n      const odd  = makeComplexArray(halfLen);\r\n      for (let k = 0; k < halfLen; k++) {\r\n        setComplex(even, k, getComplex(f, 2 * k    ));\r\n        setComplex(odd , k, getComplex(f, 2 * k + 1));\r\n      }\r\n      const even_out = fft(even, direction);\r\n      const odd_out  = fft(odd , direction);\r\n      const out = makeComplexArray(len);\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const e = getComplex(even_out, k);\r\n        const o = getComplex(odd_out , k);\r\n        const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n        setComplex(out, k          , plus (e, rotated));\r\n        setComplex(out, k + halfLen, minus(e, rotated));\r\n      }\r\n      return out;\r\n    }\r\n  }\r\n}\r\n\r\n// For compatibility with the other versions:\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const fft = fft_prepare_raw(n);\r\n  return (f: ComplexArray, out: ComplexArray, direction: number = 1) =>\r\n    copyComplexArray(fft(f, direction), out);\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex, copyComplexArray,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\n// This is what we would normally export at this stage:\r\nexport function fft_prepare_raw(n: number) {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n  return function fft(f: ComplexArray, direction: number = 1): ComplexArray {\r\n    function recur(offset: number, fStride: number, len: number): ComplexArray {\r\n      if (len === 1) {\r\n        const out = makeComplexArray(1);\r\n        setComplex(out, 0, getComplex(f, offset));\r\n        return out;\r\n      } else {\r\n        const rStride = direction * fStride;\r\n        const doubleFStride = 2 * fStride;\r\n        const halfLen = len / 2;\r\n        const even_out = recur(offset          , doubleFStride, halfLen);\r\n        const odd_out  = recur(offset + fStride, doubleFStride, halfLen);\r\n        const out = makeComplexArray(len);\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(even_out, k);\r\n          const o = getComplex(odd_out , k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, k          , plus (e, rotated));\r\n          setComplex(out, k + halfLen, minus(e, rotated));\r\n        }\r\n        return out;\r\n      }\r\n    }\r\n    return recur(0, 1, n);\r\n  }\r\n}\r\n\r\n// For compatibility with the other versions:\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const fft = fft_prepare_raw(n);\r\n  return (f: ComplexArray, out: ComplexArray, direction: number = 1) =>\r\n    copyComplexArray(fft(f, direction), out);\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    function recur(\r\n      offset: number, fStride: number,\r\n      out_offset: number,\r\n      len: number\r\n    ): void {\r\n      if (len === 1) {\r\n        setComplex(out, out_offset, getComplex(f, offset));\r\n      } else {\r\n        const rStride = direction * fStride;\r\n        const doubleFStride = 2 * fStride;\r\n        const halfLen = len / 2;\r\n        const out_offset_odd = out_offset + halfLen;\r\n        recur(offset          , doubleFStride, out_offset    , halfLen);\r\n        recur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n    recur(0, 1, 0, n);\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  function preRecur(\r\n    offset: number, fStride: number,\r\n    out_offset: number,\r\n    len: number\r\n  ): void {\r\n    if (len === 1) {\r\n      permute[out_offset] = offset;\r\n    } else {\r\n      const doubleFStride = 2 * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      preRecur(offset          , doubleFStride, out_offset    , halfLen);\r\n      preRecur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n    }\r\n  }\r\n  preRecur(0, 1, 0, n);\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    function recur(\r\n      out_offset: number,\r\n      len: number\r\n    ): void {\r\n      if (len === 1) {\r\n        setComplex(out, out_offset, getComplex(f, permute[out_offset]));\r\n      } else {\r\n        const fStride = n / len;\r\n        const rStride = direction * fStride;\r\n        const halfLen = len / 2;\r\n        const out_offset_odd = out_offset + halfLen;\r\n        recur(out_offset    , halfLen);\r\n        recur(out_offset_odd, halfLen);\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n    recur(0, n);\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  function preRecur(\r\n    offset: number, fStride: number,\r\n    out_offset: number,\r\n    len: number\r\n  ): void {\r\n    if (len === 1) {\r\n      permute[out_offset] = offset;\r\n    } else {\r\n      const doubleFStride = 2 * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      preRecur(offset          , doubleFStride, out_offset    , halfLen);\r\n      preRecur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n    }\r\n  }\r\n  preRecur(0, 1, 0, n);\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n    function recur(\r\n      out_offset: number,\r\n      len: number\r\n    ): void {\r\n      if (len > 1) {\r\n        const fStride = n / len;\r\n        const rStride = direction * fStride;\r\n        const halfLen = len / 2;\r\n        const out_offset_odd = out_offset + halfLen;\r\n        recur(out_offset    , halfLen);\r\n        recur(out_offset_odd, halfLen);\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n    recur(0, n);\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  function preRecur(\r\n    offset: number, fStride: number,\r\n    out_offset: number,\r\n    len: number\r\n  ): void {\r\n    if (len === 1) {\r\n      permute[out_offset] = offset;\r\n    } else {\r\n      const doubleFStride = 2 * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      preRecur(offset          , doubleFStride, out_offset    , halfLen);\r\n      preRecur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n    }\r\n  }\r\n  preRecur(0, 1, 0, n);\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n    function merge(out_offset: number, len: number): void {\r\n      const fStride = n / len;\r\n      const rStride = direction * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const e = getComplex(out, out_offset     + k);\r\n        const o = getComplex(out, out_offset_odd + k);\r\n        const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n        setComplex(out, out_offset     + k, plus (e, rotated));\r\n        setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n      }\r\n    }\r\n    function recur(out_offset: number, len: number): void {\r\n      if (len > 1) {\r\n        const halfLen = len / 2;\r\n        recur(out_offset          , halfLen);\r\n        recur(out_offset + halfLen, halfLen);\r\n        merge(out_offset, len);\r\n      }\r\n    }\r\n    recur(0, n);\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  function preRecur(\r\n    offset: number, fStride: number,\r\n    out_offset: number,\r\n    len: number\r\n  ): void {\r\n    if (len === 1) {\r\n      permute[out_offset] = offset;\r\n    } else {\r\n      const doubleFStride = 2 * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      preRecur(offset          , doubleFStride, out_offset    , halfLen);\r\n      preRecur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n    }\r\n  }\r\n  preRecur(0, 1, 0, n);\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n    function merge(out_offset: number, len: number): void {\r\n      const fStride = n / len;\r\n      const rStride = direction * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const e = getComplex(out, out_offset     + k);\r\n        const o = getComplex(out, out_offset_odd + k);\r\n        const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n        setComplex(out, out_offset     + k, plus (e, rotated));\r\n        setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n      }\r\n    }\r\n\r\n    for (let len = 2; len <= n; len *= 2) {\r\n      for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n        merge(out_offset, len);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  function preRecur(\r\n    offset: number, fStride: number,\r\n    out_offset: number,\r\n    len: number\r\n  ): void {\r\n    if (len === 1) {\r\n      permute[out_offset] = offset;\r\n    } else {\r\n      const doubleFStride = 2 * fStride;\r\n      const halfLen = len / 2;\r\n      const out_offset_odd = out_offset + halfLen;\r\n      preRecur(offset          , doubleFStride, out_offset    , halfLen);\r\n      preRecur(offset + fStride, doubleFStride, out_offset_odd, halfLen);\r\n    }\r\n  }\r\n  preRecur(0, 1, 0, n);\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    for (let len = 2; len <= n; len *= 2) {\r\n      const fStride = n / len;\r\n      const rStride = direction * fStride;\r\n      const halfLen = len / 2;\r\n      for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n        const out_offset_odd = out_offset + halfLen;\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len /= 2, fStride *= 2) {\r\n    const halfLen = len / 2;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    for (let len = 2; len <= n; len *= 2) {\r\n      const fStride = n / len;\r\n      const rStride = direction * fStride;\r\n      const halfLen = len / 2;\r\n      for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n        const out_offset_odd = out_offset + halfLen;\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    for (let len = 2, fStride = n >>> 1; len <= n; len <<= 1, fStride >>>= 1) {\r\n      const rStride = direction * fStride;\r\n      const halfLen = len >>> 1;\r\n      for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n        const out_offset_odd = out_offset + halfLen;\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      let rOffset = 0;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const r = getComplex(rotations, rOffset & nMask); rOffset -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\n\r\n/**\r\n * Certain FFT optimizations assume a minimum problem size and do not work\r\n * correctly for small problems.  This is a fallback implementation for these\r\n * cases, so that the optimized implementations are correct for all inputs.\r\n */\r\nexport function fallbackFFT(n: number, f: ComplexArray, out: ComplexArray) {\r\n  switch (n) {\r\n    case 1: {\r\n      setComplex(out, 0, getComplex(f, 0));\r\n      return;\r\n    }\r\n    case 2: {\r\n      const c0 = getComplex(f, 0);\r\n      const c1 = getComplex(f, 1);\r\n      setComplex(out, 0, plus(c0, c1));\r\n      setComplex(out, 1, minus(c0, c1));\r\n      return;\r\n    }\r\n    default: {\r\n      throw new Error(\"fallbackFFT should only be called with sizes 1 or 2.\");\r\n    }\r\n  }\r\n}","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nfunction rotQ({re, im}: Complex, q: number): Complex {\r\n  // switch (q & 3) {\r\n  //   case 0: return {re:  re, im:  im};\r\n  //   case 1: return {re: -im, im:  re};\r\n  //   case 2: return {re: -re, im: -im};\r\n  //   case 3: return {re:  im, im: -re};\r\n  // }\r\n\r\n  // let out = {re: .42, im: .42};\r\n  // switch (q & 3) {\r\n  //   case 0: out.re =  re; out.im =  im; break;\r\n  //   case 1: out.re = -im; out.im =  re; break;\r\n  //   case 2: out.re = -re; out.im = -im; break;\r\n  //   case 3: out.re =  im; out.im = -re; break;\r\n  // }\r\n  // return out;\r\n\r\n  // Bit-fiddling variant (avoids hard-to-predict jumps at the cost of a\r\n  // complex multiplication)\r\n  const s = 1.0 - (q & 2);\r\n  return times({re: s * (~q & 1), im: s * ( q & 1)}, {re, im});\r\n\r\n  // // Another bit-fiddling variant with fewer multiplications but array accesses\r\n  // const q1 = q + 1;\r\n  // const aux: [number, number] = [0.42, 0.42]; // or new Float64Array(2)\r\n  // aux[q  & 1] = (1.0 - (q  & 2)) * re;\r\n  // aux[q1 & 1] = (1.0 - (q1 & 2)) * im;\r\n  // return {re: aux[0], im: aux[1]};\r\n}\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const quarterN = n >>> 2;\r\n  const cosines = new Float64Array(quarterN + 1);\r\n  for (let k = 0; k <= quarterN; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    if (n <= 2) return fallbackFFT(n, f, out);\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n    const qNMask = quarterN-1;\r\n    const logQN = Math.log2(quarterN) >> 0;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      let rOffset = 0;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        // Some bit fiddling so that we only need to precompute cosines for the\r\n        // first quadrant (not the full circle, no sines).\r\n        // (Makes things less efficient in my benchmarks.)\r\n        const hi = (rOffset & nMask) >> logQN;\r\n        const lo = rOffset & qNMask;\r\n        const r = rotQ({re: cosines[lo], im: cosines[quarterN - lo]}, hi);\r\n        rOffset -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\nconst values: Record<string, number> = {};\r\n\r\nfor (let i = 0; i < chars.length; i++) {\r\n  values[chars[i]] = i;\r\n}\r\n\r\nconst rests = [0, 0, 1, 2];\r\n\r\n// We should use some de-facto standard implementation\r\nconst decodeBase64 = (base64String: string): Uint8Array => {\r\n  const input = base64String.replace(/\\s+/g, \"\").replace(/=+$/, \"\");\r\n  const restSize = input.length % 4;\r\n  const fullBlocksLimit = input.length - restSize;\r\n\r\n  const outputFullBlocksLimit = 3 / 4 * fullBlocksLimit;\r\n  const outputRestSize = rests[restSize];\r\n  const output = new Uint8Array(outputFullBlocksLimit + outputRestSize);\r\n\r\n  let i = 0, o = 0;\r\n  while (i < fullBlocksLimit) {\r\n    const blockValue =\r\n      (values[input[i++]] << 18) |\r\n      (values[input[i++]] << 12) |\r\n      (values[input[i++]] <<  6) |\r\n      (values[input[i++]] <<  0);\r\n    output[o++] = blockValue >> 16;\r\n    output[o++] = blockValue >>  8;\r\n    output[o++] = blockValue >>  0;\r\n  }\r\n  switch (outputRestSize) {\r\n    case 2:\r\n      output[outputFullBlocksLimit + 1] =\r\n        (values[input[fullBlocksLimit + 1]] << 4) |\r\n        (values[input[fullBlocksLimit + 2]] >> 2);\r\n      // fall through\r\n    case 1:\r\n      output[outputFullBlocksLimit] =\r\n        (values[input[fullBlocksLimit + 0]] << 2) |\r\n        (values[input[fullBlocksLimit + 1]] >> 4);\r\n  }\r\n  return output;\r\n};\r\n\r\nexport default decodeBase64;\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    if (n <= 2) return fallbackFFT(n, f, out);\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      let rOffset = 0;\r\n      let rOffset1 = -quarterN;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    if (n <= 2) return fallbackFFT(n, f, out);\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      let rOffset = 0;\r\n      let rOffset1 = quarterN;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        // Use positive strides making use of the even symmetry of the cosine\r\n        // function.\r\n        rOffset  += rStride;\r\n        rOffset1 += rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    if (n <= 2) return fallbackFFT(n, f, out);\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let len = 2, rStride = n >>> 1; len <= n; len <<= 1, rStride >>>= 1) {\r\n      const halfLen = len >>> 1;\r\n      let rOffset = 0;\r\n      let rOffset1 = quarterN;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re:             cosines[rOffset  & nMask],\r\n          im: direction * cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  += rStride;\r\n        rOffset1 += rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const a0 = getComplex(out, i0);\r\n        const a1 = getComplex(out, i1);\r\n\r\n        const b0 = a0;\r\n        const b1 = a1;\r\n\r\n        const c0 = plus (b0, b1);\r\n        const c1 = minus(b0, b1);\r\n\r\n        setComplex(out, i0, c0);\r\n        setComplex(out, i1, c1);\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n\r\n          const b0 = a0;\r\n          const b1 = times(a1, r);\r\n\r\n          const c0 = plus (b0, b1);\r\n          const c1 = minus(b0, b1);\r\n\r\n          setComplex(out, i0, c0);\r\n          setComplex(out, i1, c1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let len = 2, rStride = (direction * n) >> 1; len <= n; len <<= 1, rStride >>= 1) {\r\n      const halfLen = len >>> 1;\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let halfLen = 1, rStride = (direction * n) >> 1; halfLen < n; halfLen <<= 1, rStride >>= 1) {\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute =\r\n    n <= (1 <<  8) ? new Uint8Array (n) :\r\n    n <= (1 << 16) ? new Uint16Array(n) :\r\n                     new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let halfLen = 1, rStride = (direction * n) >> 1; halfLen < n; halfLen <<= 1, rStride >>= 1) {\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, Complex } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute =\r\n    n <= (1 <<  8) ? new Uint8Array (n) :\r\n    n <= (1 << 16) ? new Uint16Array(n) :\r\n                     new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  const precomputed = {n, cosines, permute};\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    const {n, cosines, permute} = precomputed;\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let halfLen = 1, rStride = (direction * n) >> 1; halfLen < n; halfLen <<= 1, rStride >>= 1) {\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re: cosines[rOffset  & nMask],\r\n          im: cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let k = 0; k < n; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const permute =\r\n    n <= (1 <<  8) ? new Uint8Array (n) :\r\n    n <= (1 << 16) ? new Uint16Array(n) :\r\n                     new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  const precomputed = {n, cosines, permute};\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    const {n, cosines, permute} = precomputed;\r\n\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const nMask = n-1;\r\n    const quarterN = n >>> 2;\r\n\r\n    for (let halfLen = 1, rStride = n >> 1; halfLen < n; halfLen <<= 1, rStride >>= 1) {\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      let rOffset1 = -quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        const r: Complex = {\r\n          re:             cosines[rOffset  & nMask],\r\n          im: direction * cosines[rOffset1 & nMask],\r\n        };\r\n        rOffset  -= rStride;\r\n        rOffset1 -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset; out_offset += halfLen;\r\n          const i1 = out_offset; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    const quarterTurn = 2*n - direction * n/4;\r\n    let len = 2, fStride = n >>> 1;\r\n    for (; len < n; len <<= 2, fStride >>>= 2) {\r\n      const rStride = direction * fStride;\r\n      const halfRStride = rStride >> 1;\r\n      const halfLen = len >>> 1;\r\n      const len2 = len << 1;\r\n      for (let out_offset_ee = 0; out_offset_ee < n; out_offset_ee += len2) {\r\n        const out_offset_eo = out_offset_ee + halfLen;\r\n        const out_offset_oe = out_offset_ee + len;\r\n        const out_offset_oo = out_offset_oe + halfLen; \r\n        for (let k = 0; k < halfLen; k++) {\r\n          const r = getComplex(rotations, (n - k * rStride) % n);\r\n\r\n          const ee =       getComplex(out, out_offset_ee + k);\r\n          const eo = times(getComplex(out, out_offset_eo + k), r);\r\n          const oe =       getComplex(out, out_offset_oe + k);\r\n          const oo = times(getComplex(out, out_offset_oo + k), r);\r\n\r\n          const ee1 =       plus (ee, eo);\r\n          const eo1 =       minus(ee, eo);\r\n          const oe1 = times(plus (oe, oo), getComplex(rotations, (n           - k * halfRStride) % n));\r\n          const oo1 = times(minus(oe, oo), getComplex(rotations, (quarterTurn - k * halfRStride) % n));\r\n\r\n          setComplex(out, out_offset_ee + k, plus (ee1, oe1));\r\n          setComplex(out, out_offset_eo + k, plus (eo1, oo1));\r\n          setComplex(out, out_offset_oe + k, minus(ee1, oe1));\r\n          setComplex(out, out_offset_oo + k, minus(eo1, oo1));\r\n        }\r\n      }\r\n    }\r\n    if (len <= n) {\r\n      const rStride = direction * fStride;\r\n      const halfLen = len >>> 1;\r\n      for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n        const out_offset_odd = out_offset + halfLen;\r\n        for (let k = 0; k < halfLen; k++) {\r\n          const e = getComplex(out, out_offset     + k);\r\n          const o = getComplex(out, out_offset_odd + k);\r\n          const rotated = times(o, getComplex(rotations, (n - k * rStride) % n));\r\n          setComplex(out, out_offset     + k, plus (e, rotated));\r\n          setComplex(out, out_offset_odd + k, minus(e, rotated));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, expi, Complex } from \"complex/dst/Complex.js\";\r\nimport {\r\n  ComplexArray,\r\n  makeComplexArray,\r\n  getComplex, setComplex,\r\n} from \"complex/dst/ComplexArray.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const rotations = makeComplexArray(n);\r\n  for (let k = 0; k < n; k++) {\r\n    setComplex(rotations, k, expi(TAU * k / n));\r\n  }\r\n\r\n  const permute = new Uint32Array(n);\r\n  for (let len = n, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < n; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    for (let k = 0; k < n; k++) {\r\n      setComplex(out, k, getComplex(f, permute[k]));\r\n    }\r\n\r\n    // \"& nMask\" is like \"% n\", but sign-safe (always in {0, ..., n-1}).\r\n    // It has a numeric purpose when applied to rOffset[123] wrapping\r\n    // around rotations (actually negative values).\r\n    // Applying it to out_offset just tells the compiler that i[0-3] are\r\n    // actually 32-bit integers.  (Does this help or hurt?)\r\n    const nMask = n-1;\r\n\r\n    let len = 2, rStride = direction * (n >>> 1);\r\n    for (; len < n; len <<= 2, rStride >>= 2) {\r\n      const rStride1 = rStride >> 1;\r\n      const rStride2 = rStride;\r\n      const rStride3 = rStride2 + rStride1;\r\n      let rOffset1 = 0;\r\n      let rOffset2 = 0;\r\n      let rOffset3 = 0;\r\n      const halfLen = len >>> 1;\r\n      for (let k = 0; k < halfLen; k++) {\r\n        const r1 = getComplex(rotations, rOffset1 & nMask); rOffset1 -= rStride1;\r\n        const r2 = getComplex(rotations, rOffset2 & nMask); rOffset2 -= rStride2;\r\n        const r3 = getComplex(rotations, rOffset3 & nMask); rOffset3 -= rStride3;\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset & nMask; out_offset += halfLen;\r\n          const i1 = out_offset & nMask; out_offset += halfLen;\r\n          const i2 = out_offset & nMask; out_offset += halfLen;\r\n          const i3 = out_offset & nMask; out_offset += halfLen;\r\n\r\n          const a0 = getComplex(out, i0);\r\n          const a1 = getComplex(out, i1);\r\n          const a2 = getComplex(out, i2);\r\n          const a3 = getComplex(out, i3);\r\n\r\n          const b0 =       a0;\r\n          const b1 = times(a1, r2);\r\n          const b2 = times(a2, r1);\r\n          const b3 = times(a3, r3);\r\n\r\n          const c0  = plus (b0, b1);\r\n          const c1  = minus(b0, b1);\r\n          const c2  = plus (b2, b3);\r\n          const aux = minus(b2, b3);\r\n          const c3: Complex = {\r\n            re:  aux.im * direction,\r\n            im: -aux.re * direction,\r\n          };\r\n\r\n          const d0 = plus (c0, c2);\r\n          const d1 = plus (c1, c3);\r\n          const d2 = minus(c0, c2);\r\n          const d3 = minus(c1, c3);\r\n\r\n          setComplex(out, i0, d0);\r\n          setComplex(out, i1, d1);\r\n          setComplex(out, i2, d2);\r\n          setComplex(out, i3, d3);\r\n        }\r\n      }\r\n    }\r\n    if (len === n) {\r\n      // If we come here, n is not a power of 4 (but still a power of 2).\r\n      // So we need to run one extra round of 2-way butterflies.\r\n      let rOffset = 0;\r\n      const halfLen = len >>> 1;\r\n      for (let k = 0, k1 = halfLen; k < halfLen; k++, k1++) {\r\n        const r = getComplex(rotations, rOffset & nMask); rOffset -= rStride;\r\n\r\n        const a0 = getComplex(out, k );\r\n        const a1 = getComplex(out, k1);\r\n\r\n        const b0 = a0;\r\n        const b1 = times(a1, r);\r\n\r\n        const c0 = plus (b0, b1);\r\n        const c1 = minus(b0, b1);\r\n\r\n        setComplex(out, k , c0);\r\n        setComplex(out, k1, c1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { minus, plus, times, rot90, Complex, timesScalar } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const cosines = new Float64Array(n);\r\n  for (let i = 0; i < n; i++) {\r\n    cosines[i] = Math.cos(TAU * i / n);\r\n  }\r\n\r\n  const quarterN = n >>> 2;\r\n  const permute = new Uint32Array(quarterN);\r\n  for (let len = quarterN, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < quarterN; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    if (n <= 2) return fallbackFFT(n, f, out);\r\n\r\n    const nMask = n - 1;\r\n    const negDirection = -direction;\r\n\r\n    const rotation = (x: number): Complex => ({\r\n      re: cosines[x & nMask],\r\n      im: cosines[(quarterN - x) & nMask]\r\n    })\r\n\r\n    for (let out_offset = 0; out_offset < n;) {\r\n      let offset = permute[out_offset >> 2];\r\n      const b0 = getComplex(f, offset); offset += quarterN;\r\n      const b2 = getComplex(f, offset); offset += quarterN;\r\n      const b1 = getComplex(f, offset); offset += quarterN;\r\n      const b3 = getComplex(f, offset);\r\n\r\n      const c0 =                   plus (b0, b1);\r\n      const c1 =                   minus(b0, b1);\r\n      const c2 =                   plus (b2, b3);\r\n      const c3 = timesScalar(rot90(minus(b2, b3)), negDirection);\r\n\r\n      setComplex(out, out_offset++, plus (c0, c2));\r\n      setComplex(out, out_offset++, plus (c1, c3));\r\n      setComplex(out, out_offset++, minus(c0, c2));\r\n      setComplex(out, out_offset++, minus(c1, c3));\r\n    }\r\n\r\n    let len = 8, rStride = direction * (n >>> 3);\r\n    for (; len < n; len <<= 2, rStride >>= 2) {\r\n      const halfLen = len >> 1;\r\n      {\r\n        for (let out_offset = 0; out_offset < n;) {\r\n          const i0 = out_offset; out_offset += halfLen;\r\n          const i1 = out_offset; out_offset += halfLen;\r\n          const i2 = out_offset; out_offset += halfLen;\r\n          const i3 = out_offset; out_offset += halfLen;\r\n  \r\n          const b0 = getComplex(out, i0);\r\n          const b1 = getComplex(out, i1);\r\n          const b2 = getComplex(out, i2);\r\n          const b3 = getComplex(out, i3);\r\n  \r\n          const c0 =                   plus (b0, b1);\r\n          const c1 =                   minus(b0, b1);\r\n          const c2 =                   plus (b2, b3);\r\n          const c3 = timesScalar(rot90(minus(b2, b3)), negDirection);\r\n  \r\n          setComplex(out, i0, plus (c0, c2));\r\n          setComplex(out, i1, plus (c1, c3));\r\n          setComplex(out, i2, minus(c0, c2));\r\n          setComplex(out, i3, minus(c1, c3));\r\n        }\r\n      }\r\n      const rStride1 = rStride >> 1;\r\n      const rStride2 = rStride;\r\n      const rStride3 = rStride2 + rStride1;\r\n      let rOffset1 = -rStride1;\r\n      let rOffset2 = -rStride2;\r\n      let rOffset3 = -rStride3;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        // TODO Some bit fiddling with rOffset[123] to restrict cosine lookups\r\n        // to the first quadrant?  Then shorten the cosines array.\r\n        const r1 = rotation(rOffset1); rOffset1 -= rStride1;\r\n        const r2 = rotation(rOffset2); rOffset2 -= rStride2;\r\n        const r3 = rotation(rOffset3); rOffset3 -= rStride3;\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset; out_offset += halfLen;\r\n          const i1 = out_offset; out_offset += halfLen;\r\n          const i2 = out_offset; out_offset += halfLen;\r\n          const i3 = out_offset; out_offset += halfLen;\r\n\r\n          const b0 =       getComplex(out, i0)     ;\r\n          const b1 = times(getComplex(out, i1), r2);\r\n          const b2 = times(getComplex(out, i2), r1);\r\n          const b3 = times(getComplex(out, i3), r3);\r\n\r\n          const c0 =                   plus (b0, b1);\r\n          const c1 =                   minus(b0, b1);\r\n          const c2 =                   plus (b2, b3);\r\n          const c3 = timesScalar(rot90(minus(b2, b3)), negDirection);\r\n\r\n          setComplex(out, i0, plus (c0, c2));\r\n          setComplex(out, i1, plus (c1, c3));\r\n          setComplex(out, i2, minus(c0, c2));\r\n          setComplex(out, i3, minus(c1, c3));\r\n        }\r\n      }\r\n    }\r\n    if (len === n) {\r\n      // If we come here, n is not a power of 4 (but still a power of 2).\r\n      // So we need to run one extra round of 2-way butterflies.\r\n      const halfLen = len >>> 1;\r\n\r\n      // TODO Roll this back into the following loop?\r\n      // Saving a single complex multiplicatin is probably not worth the extra code.\r\n      {\r\n        const z0 = getComplex(out, 0);\r\n        const z1 = getComplex(out, halfLen);\r\n\r\n        setComplex(out, 0      , plus (z0, z1));\r\n        setComplex(out, halfLen, minus(z0, z1));\r\n      }\r\n      let rOffset = -rStride;\r\n      for (let k0 = 1, k1 = halfLen + 1; k0 < halfLen; k0++, k1++) {\r\n        const r = rotation(rOffset); rOffset -= rStride;\r\n\r\n        const z0 =       getComplex(out, k0);\r\n        const z1 = times(getComplex(out, k1), r);\r\n\r\n        setComplex(out, k0, plus (z0, z1));\r\n        setComplex(out, k1, minus(z0, z1));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const half_n = n >> 1;\r\n  const quarter_n = half_n >> 1;\r\n\r\n  const permute = new Uint32Array(half_n);\r\n  for (let s = quarter_n, t = 1; s; s >>= 1, t <<= 1) {\r\n    for (let i = 0; i < half_n; i += 2*s) {\r\n      const limit = i + 2*s;\r\n      for (let j = i + s; j < limit; j++) {\r\n        permute[j] += t;\r\n      }\r\n    }\r\n  }\r\n\r\n  const cosTable = new Float64Array(quarter_n + 1);\r\n  // for (const i of cosTable.keys()) {\r\n  for (let i = 0; i <= quarter_n; i++) {\r\n    cosTable[i] = Math.cos(i/n * TAU);\r\n  }\r\n\r\n  return function fft(ps: ComplexArray, cs: ComplexArray, direction: number = 1) {\r\n    if (n < 2) return fallbackFFT(n, ps, cs);\r\n  \r\n    for (let i = 0; i < n;) {\r\n      const j = permute[i >> 1];\r\n      const a = getComplex(ps, j         );\r\n      const b = getComplex(ps, j + half_n);\r\n      setComplex(cs, i++, plus (a, b));\r\n      setComplex(cs, i++, minus(a, b));\r\n    }\r\n\r\n    for (let half_size = 2, tableStride = quarter_n; tableStride; half_size <<= 1, tableStride >>= 1) {\r\n      for (let i = 0; i < n; i += 2 * half_size) {\r\n        let j = i, k = i + half_size;\r\n        for (let r = -quarter_n; r < quarter_n; r += tableStride) {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          // Performance hack relying on r to fit in an int32.\r\n          // It computes the sign of 0 as +1, but that's ok.\r\n          const rSign = (r >> 31) * 2 + 1;\r\n          const rAbs = rSign * r;\r\n          const rotation: Complex = {\r\n            re: -(rSign * cosTable[quarter_n - rAbs]),\r\n            im: -direction * cosTable[rAbs],\r\n          };\r\n          const b_rotated = times(rotation, b);\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          j++; k++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const half_n = n >> 1;\r\n  const quarter_n = half_n >> 1;\r\n\r\n  const permute = new Uint32Array(half_n);\r\n  for (let s = quarter_n, t = 1; s; s >>= 1, t <<= 1) {\r\n    for (let i = 0; i < half_n; i += 2*s) {\r\n      const limit = i + 2*s;\r\n      for (let j = i + s; j < limit; j++) {\r\n        permute[j] += t;\r\n      }\r\n    }\r\n  }\r\n\r\n  const cosTable = new Float64Array(quarter_n + 1);\r\n  // for (const i of cosTable.keys()) {\r\n  for (let i = 0; i <= quarter_n; i++) {\r\n    cosTable[i] = Math.cos(i/n * TAU);\r\n  }\r\n\r\n  return function fft(ps: ComplexArray, cs: ComplexArray, direction: number = 1) {\r\n    if (n < 2) return fallbackFFT(n, ps, cs);\r\n  \r\n    for (let i = 0; i < n;) {\r\n      const j = permute[i >> 1];\r\n      const a = getComplex(ps, j         );\r\n      const b = getComplex(ps, j + half_n);\r\n      setComplex(cs, i++, plus (a, b));\r\n      setComplex(cs, i++, minus(a, b));\r\n    }\r\n\r\n    for (let half_size = 2, tableStride = quarter_n; tableStride; half_size <<= 1, tableStride >>= 1) {\r\n      for (let i = 0; i < n; i += 2 * half_size) {\r\n        let j = i, k = i + half_size, r = -quarter_n;\r\n        for (; r < 0; r += tableStride) {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          const rotation: Complex = {\r\n            re: cosTable[quarter_n + r],\r\n            im: -direction * cosTable[-r],\r\n          };\r\n          const b_rotated = times(rotation, b);\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          j++; k++;\r\n        }\r\n        for (; r < quarter_n; r += tableStride) {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          const rotation: Complex = {\r\n            re: -cosTable[quarter_n - r],\r\n            im: -direction * cosTable[r],\r\n          };\r\n          const b_rotated = times(rotation, b);\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          j++; k++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const half_n = n >> 1;\r\n  const quarter_n = half_n >> 1;\r\n\r\n  const permute = new Uint32Array(half_n);\r\n  for (let s = quarter_n, t = 1; s; s >>= 1, t <<= 1) {\r\n    for (let i = 0; i < half_n; i += 2*s) {\r\n      const limit = i + 2*s;\r\n      for (let j = i + s; j < limit; j++) {\r\n        permute[j] += t;\r\n      }\r\n    }\r\n  }\r\n\r\n  const cosTable = new Float64Array(quarter_n + 1);\r\n  // for (const i of cosTable.keys()) {\r\n  for (let i = 0; i <= quarter_n; i++) {\r\n    cosTable[i] = Math.cos(i/n * TAU);\r\n  }\r\n\r\n  return function fft(ps: ComplexArray, cs: ComplexArray, direction: number = 1) {\r\n    if (n < 2) return fallbackFFT(n, ps, cs);\r\n  \r\n    for (let i = 0; i < n;) {\r\n      const j = permute[i >> 1];\r\n      const a = getComplex(ps, j         );\r\n      const b = getComplex(ps, j + half_n);\r\n      setComplex(cs, i++, plus (a, b));\r\n      setComplex(cs, i++, minus(a, b));\r\n    }\r\n\r\n    for (let half_size = 2, tableStride = quarter_n; tableStride; half_size <<= 1, tableStride >>= 1) {\r\n      for (let i = 0; i < n; i += 2 * half_size) {\r\n        let j = i, k = i + half_size;\r\n        {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          setComplex(cs, j, plus (a, b));\r\n          setComplex(cs, k, minus(a, b));\r\n        }\r\n        for (let r = -quarter_n + tableStride; r < quarter_n; r += tableStride) {\r\n          j++; k++;\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          // Performance hack relying on r to fit in an int32.\r\n          // It computes the sign of 0 as +1, but that's ok.\r\n          const rSign = (r >> 31) * 2 + 1;\r\n          const rAbs = rSign * r;\r\n          const rotation: Complex = {\r\n            re: -(rSign * cosTable[quarter_n - rAbs]),\r\n            im: -direction * cosTable[rAbs],\r\n          };\r\n          const b_rotated = times(rotation, b);\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const half_n = n >> 1;\r\n  const quarter_n = half_n >> 1;\r\n\r\n  const permute = new Uint32Array(half_n);\r\n  for (let s = quarter_n, t = 1; s; s >>= 1, t <<= 1) {\r\n    for (let i = 0; i < half_n; i += 2*s) {\r\n      const limit = i + 2*s;\r\n      for (let j = i + s; j < limit; j++) {\r\n        permute[j] += t;\r\n      }\r\n    }\r\n  }\r\n\r\n  const cosTable = new Float64Array(quarter_n + 1);\r\n  // for (const i of cosTable.keys()) {\r\n  for (let i = 0; i <= quarter_n; i++) {\r\n    cosTable[i] = Math.cos(i/n * TAU);\r\n  }\r\n\r\n  return function fft(ps: ComplexArray, cs: ComplexArray, direction: number = 1) {\r\n    if (n < 2) return fallbackFFT(n, ps, cs);\r\n  \r\n    for (let i = 0; i < n;) {\r\n      const j = permute[i >> 1];\r\n      const a = getComplex(ps, j         );\r\n      const b = getComplex(ps, j + half_n);\r\n      setComplex(cs, i++, plus (a, b));\r\n      setComplex(cs, i++, minus(a, b));\r\n    }\r\n\r\n    for (let half_size = 2, tableStride = quarter_n; tableStride; half_size <<= 1, tableStride >>= 1) {\r\n      for (let i = 0; i < n; i += 2 * half_size) {\r\n        let j = i, k = i + half_size, r = -quarter_n;\r\n        {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          setComplex(cs, j, plus (a, b));\r\n          setComplex(cs, k, minus(a, b));\r\n          r += tableStride; j++; k++;\r\n        }\r\n        while (r < 0) {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          const b_rotated: Complex = times(b, {\r\n            re: cosTable[quarter_n + r],\r\n            im: -direction * cosTable[-r],\r\n          });\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          r += tableStride; j++; k++;\r\n        }\r\n        {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          const b_rotated: Complex = {\r\n            re: direction * b.im,\r\n            im: -direction * b.re,\r\n          };\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          r += tableStride; j++; k++;\r\n        }\r\n        while (r < quarter_n) {\r\n          const a = getComplex(cs, j);\r\n          const b = getComplex(cs, k);\r\n          const b_rotated: Complex = times(b, {\r\n            re: -(cosTable[quarter_n - r]),\r\n            im: -direction * cosTable[r],\r\n          });\r\n          setComplex(cs, j, plus (a, b_rotated));\r\n          setComplex(cs, k, minus(a, b_rotated));\r\n          j++; k++; r += tableStride;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const quarterN = n >> 2;\r\n  const cosines = new Float64Array(quarterN + 1);\r\n  for (let k = 0; k <= quarterN; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const halfN = n >> 1;\r\n  const permute =\r\n    n <= (1 <<  8) ? new Uint8Array (halfN) :\r\n    n <= (1 << 16) ? new Uint16Array(halfN) :\r\n                     new Uint32Array(halfN);\r\n  for (let len = halfN, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < halfN; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  const precomputed = {n, cosines, permute};\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    const {n, cosines, permute} = precomputed;\r\n\r\n    if (n < 2) return fallbackFFT(n, f, out);\r\n  \r\n    const halfN = n >>> 1;\r\n\r\n    for (let out_offset = 0; out_offset < n;) {\r\n      const i0 = permute[out_offset >> 1];\r\n      const i1 = i0 + halfN;\r\n\r\n      const z0 = getComplex(f, i0);\r\n      const z1 = getComplex(f, i1);\r\n\r\n      setComplex(out, out_offset++, plus (z0, z1));\r\n      setComplex(out, out_offset++, minus(z0, z1));\r\n    }\r\n\r\n    for (let halfLen = 2, rStride = quarterN; rStride; halfLen <<= 1, rStride >>= 1) {\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += halfLen;\r\n        const i1 = out_offset; out_offset += halfLen;\r\n\r\n        const z0 = getComplex(out, i0);\r\n        const z1 = getComplex(out, i1);\r\n\r\n        setComplex(out, i0, plus (z0, z1));\r\n        setComplex(out, i1, minus(z0, z1));\r\n      }\r\n      let rOffset = quarterN - rStride;\r\n      for (let k = 1; k < halfLen; k++) {\r\n        // Performance hack relying on rOffset to fit in an int32.\r\n        // It computes the sign of 0 as +1, but that's ok.\r\n        const rSign = (rOffset >> 31) * 2 + 1;\r\n        const rAbs = rSign * rOffset;\r\n        const r: Complex = {\r\n          re: rSign * cosines[quarterN - rAbs],\r\n          im: -direction * cosines[rAbs],\r\n        };\r\n        rOffset -= rStride;\r\n\r\n        for (let out_offset = k; out_offset < n;) {\r\n          const i0 = out_offset; out_offset += halfLen;\r\n          const i1 = out_offset; out_offset += halfLen;\r\n\r\n          const z0 =       getComplex(out, i0)    ;\r\n          const z1 = times(getComplex(out, i1), r);\r\n\r\n          setComplex(out, i0, plus (z0, z1));\r\n          setComplex(out, i1, minus(z0, z1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Complex, minus, plus, times } from \"complex/dst/Complex.js\";\r\nimport { ComplexArray, getComplex, setComplex } from \"complex/dst/ComplexArray.js\";\r\nimport { fallbackFFT } from \"./fallbackFFT.js\";\r\nimport { FFTPrep } from \"./fft_types.js\";\r\n\r\n\r\nconst TAU = 2 * Math.PI; // https://en.wikipedia.org/wiki/Turn_(angle)#Tau_proposals\r\n\r\nexport const fft_prepare: FFTPrep = n => {\r\n  const quarterN = n >> 2;\r\n  const cosines = new Float64Array(quarterN + 1);\r\n  for (let k = 0; k <= quarterN; k++) {\r\n    cosines[k] = Math.cos(TAU * k / n);\r\n  }\r\n\r\n  const halfN = n >> 1;\r\n  const permute =\r\n    n <= (1 <<  8) ? new Uint8Array (halfN) :\r\n    n <= (1 << 16) ? new Uint16Array(halfN) :\r\n                     new Uint32Array(halfN);\r\n  for (let len = halfN, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n    const halfLen = len >>> 1;\r\n    for (let out_offset = 0; out_offset < halfN; out_offset += len) {\r\n      const limit = out_offset + len;\r\n      for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n        permute[out_offset_odd] += fStride;\r\n      }\r\n    }\r\n  }\r\n\r\n  const precomputed = {n, cosines, permute};\r\n\r\n  return function fft(f: ComplexArray, out: ComplexArray, direction: number = 1): void {\r\n    const {n, cosines, permute} = precomputed;\r\n\r\n    if (n < 2) return fallbackFFT(n, f, out);\r\n  \r\n    const halfN = n >>> 1;\r\n\r\n    for (let out_offset = 0; out_offset < n;) {\r\n      const i0 = permute[out_offset >> 1];\r\n      const i1 = i0 + halfN;\r\n\r\n      const z0 = getComplex(f, i0);\r\n      const z1 = getComplex(f, i1);\r\n\r\n      setComplex(out, out_offset++, plus (z0, z1));\r\n      setComplex(out, out_offset++, minus(z0, z1));\r\n    }\r\n\r\n    for (let halfLen = 2, rStride = quarterN; rStride; halfLen <<= 1, rStride >>= 1) {\r\n      const quarterLen = halfLen >> 1;\r\n      for (let out_offset = 0; out_offset < n;) {\r\n        const i0 = out_offset; out_offset += quarterLen;\r\n        const i1 = out_offset; out_offset += quarterLen;\r\n        const i2 = out_offset; out_offset += quarterLen;\r\n        const i3 = out_offset; out_offset += quarterLen;\r\n\r\n        const z0  = getComplex(out, i0);\r\n        const z1  = getComplex(out, i1);\r\n        const z2  = getComplex(out, i2);\r\n        const aux = getComplex(out, i3);\r\n        const z3: Complex = {re: direction * aux.im, im: -direction * aux.re};\r\n\r\n        setComplex(out, i0, plus (z0, z2));\r\n        setComplex(out, i1, plus (z1, z3));\r\n        setComplex(out, i2, minus(z0, z2));\r\n        setComplex(out, i3, minus(z1, z3));\r\n      }\r\n      let rOffset = quarterN;\r\n      let k = 0;\r\n      for (let limit = quarterLen; limit <= halfLen; limit += quarterLen) {\r\n        k++; rOffset -= rStride; // skip the two cases simplified above\r\n        for (; k < limit; k++) {\r\n          // Performance hack relying on rOffset to fit in an int32.\r\n          // It computes the sign of 0 as +1, but that's ok.\r\n          const rSign = (rOffset >> 31) * 2 + 1;\r\n          const rAbs = rSign * rOffset;\r\n          const r: Complex = {\r\n            re: (rSign * cosines[quarterN - rAbs]),\r\n            im: -direction * cosines[rAbs],\r\n          };\r\n          rOffset -= rStride;\r\n\r\n          for (let out_offset = k; out_offset < n;) {\r\n            const i0 = out_offset; out_offset += halfLen;\r\n            const i1 = out_offset; out_offset += halfLen;\r\n\r\n            const z0 =       getComplex(out, i0)    ;\r\n            const z1 = times(getComplex(out, i1), r);\r\n\r\n            setComplex(out, i0, plus (z0, z1));\r\n            setComplex(out, i1, minus(z0, z1));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { fft_prepare as fft01 } from \"./fft01.js\";\r\nimport { fft_prepare as fft02 } from \"./fft02.js\";\r\nimport { fft_prepare as fft03 } from \"./fft03.js\";\r\nimport { fft_prepare as fft04 } from \"./fft04.js\";\r\nimport { fft_prepare as fft05 } from \"./fft05.js\";\r\nimport { fft_prepare as fft06 } from \"./fft06.js\";\r\nimport { fft_prepare as fft07 } from \"./fft07.js\";\r\nimport { fft_prepare as fft08 } from \"./fft08.js\";\r\nimport { fft_prepare as fft09 } from \"./fft09.js\";\r\nimport { fft_prepare as fft10 } from \"./fft10.js\";\r\nimport { fft_prepare as fft11 } from \"./fft11.js\";\r\nimport { fft_prepare as fft12 } from \"./fft12.js\";\r\nimport { fft_prepare as fft13 } from \"./fft13.js\";\r\nimport { fft_prepare as fft14 } from \"./fft14.js\";\r\nimport { fft_prepare as fft14a } from \"./fft14a.js\";\r\nimport { fft_prepare as fft14b } from \"./fft14b.js\";\r\nimport { fft_prepare as fft15 } from \"./fft15.js\";\r\nimport { fft_prepare as fft15a } from \"./fft15a.js\";\r\nimport { fft_prepare as fft15b } from \"./fft15b.js\";\r\nimport { fft_prepare as fft15c } from \"./fft15c.js\";\r\nimport { fft_prepare as fft15d } from \"./fft15d.js\";\r\nimport { fft_prepare as fft16 } from \"./fft16.js\";\r\nimport { fft_prepare as fft40 } from \"./fft40.js\";\r\nimport { fft_prepare as fft44 } from \"./fft44.js\";\r\nimport { fft_prepare as fft47 } from \"./fft47.js\";\r\nimport { fft_prepare as fft98 } from \"./fft98.js\";\r\nimport { fft_prepare as fft98a } from \"./fft98a.js\";\r\nimport { fft_prepare as fft99 } from \"./fft99.js\";\r\nimport { fft_prepare as fft99a } from \"./fft99a.js\";\r\nimport { fft_prepare as fft99b } from \"./fft99b.js\";\r\nimport { fft_prepare as fft99c } from \"./fft99c.js\";\r\nimport { FFTFactory, FFT } from \"fft-api/dst\"\r\nimport { Complex } from \"complex/dst/Complex.js\";\r\nimport { FFTPrep, FFTRun } from \"./fft_types.js\";\r\nimport { ComplexArray, getComplex, makeComplexArray, setComplex } from \"complex/dst/ComplexArray.js\";\r\n\r\nconst fft_prepares: Record<string, FFTPrep> = {\r\n  fft01,\r\n  fft02,\r\n  fft03,\r\n  fft04,\r\n  fft05,\r\n  fft06,\r\n  fft07,\r\n  fft08,\r\n  fft09,\r\n  fft10,\r\n  fft11,\r\n  fft12,\r\n  fft13,\r\n  fft14,\r\n  fft14a,\r\n  fft14b,\r\n  fft15,\r\n  fft15a,\r\n  fft15b,\r\n  fft15c,\r\n  fft15d,\r\n  fft16,\r\n  fft40,\r\n  fft44,\r\n  fft47,\r\n  fft98,\r\n  fft98a,\r\n  fft99,\r\n  fft99a,\r\n  fft99b,\r\n  fft99c,\r\n}\r\n\r\nclass FFT_API implements FFT {\r\n  input: ComplexArray;\r\n  output: ComplexArray;\r\n  fftRun: FFTRun;\r\n\r\n  constructor(\r\n    public readonly size: number,\r\n    fft_prepare: FFTPrep,\r\n  ) {\r\n    this.input = makeComplexArray(size);\r\n    this.output = makeComplexArray(size);\r\n    this.fftRun = fft_prepare(size);\r\n  }\r\n\r\n  setInput(index: number, value: Complex): void {\r\n    setComplex(this.input, index, value);\r\n  }\r\n  getInput(index: number): Complex {\r\n    return getComplex(this.input, index);\r\n  }\r\n  run(direction?: number): void {\r\n    this.fftRun(this.input, this.output, direction);\r\n  }\r\n  runBlock(nCalls: number, direction?: number): number {\r\n    const start = performance.now();\r\n    for (let i = 0; i < nCalls; i++) {\r\n      this.fftRun(this.input, this.output, direction);\r\n    }\r\n    const end = performance.now();\r\n    return (end - start) * 1e-3;\r\n  }\r\n  getOutput(index: number): Complex {\r\n    return getComplex(this.output, index);\r\n  }\r\n\r\n  dispose(): void {\r\n    // nothing to do; just rely on garbage collection\r\n  }\r\n}\r\n\r\nexport const versions: Record<string, FFTFactory> = Object.fromEntries(\r\n  Object.entries(fft_prepares)\r\n  .map(([name, fft_prepare]) => [name, (size: number) => new FFT_API(size, fft_prepare)])\r\n);\r\n","import { Complex } from \"complex/dst/Complex.js\";\r\n\r\nconst scalarType = \"double\";\r\nconst scalarSize = 8;\r\nconst complexSize = 2 * scalarSize;\r\n\r\nexport type Instance = {\r\n  _malloc(s: number): number,\r\n  _free(s: number): void,\r\n  _prepare_fft(n: number): number,\r\n  _delete_fft(s: number): void,\r\n  _run_fft(fft: number, a0: number, a1: number, direction: number): void,\r\n  getValue(p: number, type: \"double\"): number,\r\n  setValue(p: number, val: number, type: \"double\"): void,\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n// Some utilities similar to module \"complex/dst/ComplexArray\",\r\n// but using memory allocated by an instance\r\n\r\nexport class ComplexArray {\r\n  p: number;\r\n\r\n  constructor(\r\n    public instance: Instance,\r\n    public n: number,\r\n  ) {\r\n    this.p = instance._malloc(n * complexSize);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.instance._free(this.p);\r\n  }\r\n}\r\n\r\nexport const complexArrayLength = (a: ComplexArray): number => a.n;\r\n\r\nexport const getComplex = (a: ComplexArray, i: number): Complex => ({\r\n  re: a.instance.getValue(a.p + complexSize * i             , scalarType),\r\n  im: a.instance.getValue(a.p + complexSize * i + scalarSize, scalarType),\r\n});\r\n\r\nexport const setComplex = (a: ComplexArray, i: number, {re, im}: Complex): void => {\r\n  a.instance.setValue(a.p + i * complexSize             , re, scalarType);\r\n  a.instance.setValue(a.p + i * complexSize + scalarSize, im, scalarType);\r\n};\r\n","export const versionNames = `\r\n  fft01\r\n  fft02\r\n  fft44\r\n  fft47\r\n  fft47pointers\r\n  fft48\r\n  fft60\r\n  fft99b\r\n  fft99c\r\n  fftKiss\r\n  fftKiss2\r\n`.trim().split(/\\s+/);\r\n","import { Complex } from \"complex/dst/Complex.js\";\r\nimport { FFT, FFTFactory } from \"fft-api/dst\";\r\nimport { ComplexArray, getComplex, Instance, setComplex } from \"./fft-instance-utils.js\";\r\nimport { versionNames } from \"./info.js\";\r\n\r\n\r\nclass FFTFromInstance implements FFT {\r\n  private input: ComplexArray;\r\n  private output: ComplexArray;\r\n  private p: number;\r\n\r\n  constructor(\r\n    private readonly instance: Instance,\r\n    public readonly size: number,\r\n  ) {\r\n    this.input = new ComplexArray(instance, size);\r\n    this.output = new ComplexArray(instance, size);\r\n    this.p = instance._prepare_fft(size);\r\n  }\r\n\r\n  setInput(i: number, value: Complex): void {\r\n    setComplex(this.input, i, value);\r\n  }\r\n  getInput(i: number): Complex {\r\n    return getComplex(this.input, i);\r\n  }\r\n  run(direction: number = 1): void {\r\n    this.instance._run_fft(this.p, this.input.p, this.output.p, direction);\r\n  }\r\n  runBlock(nCalls: number, direction: number = 1): number {\r\n    const start = performance.now();\r\n    for (let i = 0; i < nCalls; i++) {\r\n      this.instance._run_fft(this.p, this.input.p, this.output.p, direction);\r\n    }\r\n    const end = performance.now();\r\n    return (end - start) * 1e-3;\r\n  }\r\n  getOutput(i: number): Complex {\r\n    return getComplex(this.output, i);\r\n  }\r\n\r\n  dispose() {\r\n    // do nothing; just leave objects to garbage collection\r\n  }\r\n}\r\n\r\nexport const versions: Record<string, () => Promise<FFTFactory>> =\r\n  Object.fromEntries(\r\n    versionNames.map((name) => {\r\n      async function makeFFTFactory(): Promise<FFTFactory> {\r\n        // // Just to see if the handling of pending and rejected promises works:\r\n        // if (name === \"fft02\") throw new Error(\"FOO BAR\");\r\n        // if (name === \"fft44\") await new Promise(resolve => setTimeout(resolve, 5000));\r\n        const imported = await import(`../dst-js/${name}.js`);\r\n        const factory = imported.default;\r\n        const instance = await factory();\r\n        return (size: number) => new FFTFromInstance(instance, size);\r\n      }\r\n      return [name, makeFFTFactory];\r\n    })\r\n  );\r\n    ","type Region = {\r\n  start: number,\r\n  end: number,\r\n  length: number,\r\n}\r\n\r\n// Not the most simplistic but still quite simple heap implementation\r\n// TODO Use a third-party library? Which one?\r\n// Otherwise this deserves more thorough testing beyond the selfCheck\r\n// (OTOH our use case would get by without merging of free regions.)\r\nexport\r\nfunction makeHeap(\r\n  memory: WebAssembly.Memory,\r\n  start: number,\r\n  {shouldSelfCheck = false}: {shouldSelfCheck?: boolean | \"quiet\"} = {}\r\n) {\r\n  let end = start;\r\n  const allocatedRegions: Map<number, Region> = new Map();\r\n  const freeRegions: Region[] = [];\r\n\r\n  function selfCheck(situation: string) {\r\n    function fail(strings: TemplateStringsArray, ...args: Object[]) {\r\n      const texts = [strings[0]];\r\n      for (let i = 0; i < args.length; i++) {\r\n        texts.push(strings[i], JSON.stringify(args[i]));\r\n      }\r\n      throw new Error(`internal error upon ${situation}: ${texts.join(\"\")}`);\r\n    }\r\n\r\n    if (memory.buffer.byteLength < end) {\r\n      fail`less than ${end} bytes allocated: ${memory.buffer.byteLength}`;\r\n    }\r\n\r\n    for (let i = 1; i < freeRegions.length; i++) {\r\n      if (freeRegions[i-1].start >= freeRegions[i].start) {\r\n        fail`sort order of free regions violated: ${freeRegions[i-1]}, ${freeRegions[i]}`;\r\n      }\r\n    }\r\n\r\n    const allRegions = [\r\n      ...freeRegions.map(r => ({r, free: true})),\r\n      ...[...allocatedRegions.values()].map(r => ({r, free: false})),\r\n    ].sort((a, b) => a.r.start - b.r.start);\r\n    if (shouldSelfCheck !== \"quiet\") {\r\n      console.log(\"heap self-check\", situation, allRegions, end);\r\n    }\r\n\r\n    for (const regFree of allRegions) {\r\n      const {start, length, end} = regFree.r;\r\n      if (!(length > 0)) {\r\n        fail`memory region with non-positive length ${regFree}`;\r\n      }\r\n      if (length & 15) {\r\n        fail`memory region with unaligned length ${regFree}`;\r\n      }\r\n      if (start & 15) {\r\n        fail`memory region with unaligned address ${regFree}`;\r\n      }\r\n      if (!(end === start + length)) {\r\n        fail`inconsistent memory region ${regFree}`;\r\n      }\r\n    }\r\n    if (allRegions.length === 0) {\r\n      if (end !== start) {\r\n        fail`no regions but end (${end}) !== start (${start})`;\r\n      }\r\n      return;\r\n    }\r\n    if (allRegions[0].r.start !== start) {\r\n      fail`first memory region ${allRegions[0]} does not start at ${start}`;\r\n    }\r\n    for (let i = 1; i < allRegions.length; i++) {\r\n      if (allRegions[i].r.start !== allRegions[i-1].r.end) {\r\n        fail`non-adjacent memory region ${allRegions[i]}`;\r\n      }\r\n      if (allRegions[i-1].free && allRegions[i].free) {\r\n        fail`adjacent free memory regions: ${allRegions[i-1]}, ${allRegions[i]}`;\r\n      }\r\n    }\r\n    if (allRegions[allRegions.length - 1].r.end !== end) {\r\n      fail`last memory region ${allRegions[allRegions.length - 1]} does not end at ${end}`;\r\n    }\r\n    if (allRegions[allRegions.length - 1].free) {\r\n      fail`last memory region is free`;\r\n    }\r\n  }\r\n\r\n  function ensureMemoryUntil(end: number): void {\r\n    const diff = end - memory.buffer.byteLength;\r\n    if (diff > 0) {\r\n      memory.grow((diff + ((1 << 16) - 1)) >> 16);\r\n      if (shouldSelfCheck === true) {\r\n        console.log(\"grown to\", memory.buffer.byteLength);\r\n      }\r\n    }\r\n  }\r\n\r\n  function malloc(length: number): number {\r\n    if (length === 0) {\r\n      length = 1; // so that regions have unique (start) addresses\r\n    }\r\n    length = (length + 15) & -16; // alignment/granularity 16; is this a good choice?\r\n    let candidateIdx = -1;\r\n    for (let i = 0; i < freeRegions.length; i++) {\r\n      const r = freeRegions[i];\r\n      if (\r\n        r.length >= length &&\r\n        (candidateIdx < 0 || r.length < freeRegions[candidateIdx].length)\r\n      ) {\r\n        candidateIdx = i;\r\n        if (r.length === length) break; // just an optimization;\r\n      }\r\n    }\r\n    if (candidateIdx < 0) {\r\n      // no candidate found; create new region at the end\r\n      const start = end;\r\n      end += length;\r\n      // if growing fails, standard malloc would return NULL;\r\n      // we just let the exception thrown by memory.grow pass;\r\n      ensureMemoryUntil(end);\r\n      allocatedRegions.set(start, {start, length, end});\r\n      return start;\r\n    } else if (freeRegions[candidateIdx].length === length) {\r\n      // candidate with precisely fitting length found; allocate it\r\n      const [candidate] = freeRegions.splice(candidateIdx, 1);\r\n      allocatedRegions.set(candidate.start, candidate);\r\n      return candidate.start;\r\n    } else {\r\n      // candidate with too much memory found; split it\r\n      const candidate = freeRegions[candidateIdx];\r\n      const {start} = candidate;\r\n      const end = start + length;\r\n      candidate.start = end;\r\n      candidate.length -= length;\r\n      allocatedRegions.set(start, {start, length, end});\r\n      return start;\r\n    }\r\n  }\r\n\r\n  function free(addr: number): void {\r\n    const r = allocatedRegions.get(addr);\r\n    if (!r) {\r\n      throw new Error(`attempt to free unallocated memory at ${addr}`);\r\n    }\r\n    allocatedRegions.delete(addr);\r\n    for (let i = 0; i < freeRegions.length; i++) {\r\n      const ri = freeRegions[i];\r\n      if (ri.start > r.end) {\r\n        // we are beyond our freed region r; so insert it:\r\n        freeRegions.splice(i, 0, r);\r\n        return;\r\n      }\r\n      if (ri.end === r.start) {\r\n        // merge ri into r:\r\n        freeRegions.splice(i--, 1);\r\n        r.start = ri.start;\r\n        r.length += ri.length;\r\n        continue;\r\n      }\r\n      if (ri.start === r.end) {\r\n        // merge ri into r:\r\n        freeRegions.splice(i--, 1);\r\n        r.end += ri.length;\r\n        r.length += ri.length;\r\n      }\r\n    }\r\n    if (r.end === end) {\r\n      end = r.start;\r\n    } else {\r\n      freeRegions.push(r);\r\n    }\r\n  }\r\n\r\n  ensureMemoryUntil(start);\r\n\r\n  if (shouldSelfCheck) {\r\n    selfCheck(\"initialization\");\r\n    return  {\r\n      memory,\r\n      malloc: (length: number) => {\r\n        const addr = malloc(length);\r\n        selfCheck(`malloc(${length})`);\r\n        return addr;\r\n      },\r\n      free: (addr: number) => {\r\n        free(addr);\r\n        selfCheck(`free(${addr})`);\r\n      },\r\n    };\r\n  } else {\r\n    return {memory, malloc, free};\r\n  }\r\n}\r\n","import { Complex } from \"complex/dst/Complex.js\";\r\nimport { FFT, FFTFactory } from \"fft-api/dst\";\r\nimport decodeBase64 from \"base64/dst/decodeBase64.js\";\r\nimport { versionNames } from \"./info.js\";\r\nimport { makeHeap } from \"./makeHeap.js\";\r\n\r\ntype API = {\r\n  prepare_fft(n: number): number,\r\n  run_fft(fft: number, input: number, output: number, direction: number): void,\r\n  delete_fft(fft: number): void,\r\n\r\n  malloc(size: number): number,\r\n  free(p: number): void,\r\n};\r\n\r\nclass FFTFromWASM implements FFT {\r\n  private input: number;\r\n  private output: number;\r\n  private fft: number;\r\n  private isDisposed: boolean = false;\r\n\r\n  constructor(\r\n    private readonly memory: WebAssembly.Memory,\r\n    private readonly api: API,\r\n    public readonly size: number,\r\n  ) {\r\n    this.input = api.malloc(size * 16);\r\n    this.output = api.malloc(size * 16);\r\n    this.fft = api.prepare_fft(size);\r\n  }\r\n\r\n  private checkDisposed() {\r\n    if (this.isDisposed) {\r\n      throw new Error(\"Trying to use disposed FFTFromWASM instance\");\r\n    }\r\n  }\r\n\r\n  setInput(i: number, value: Complex): void {\r\n    this.checkDisposed();\r\n    const dv = new DataView(this.memory.buffer);\r\n    dv.setFloat64(this.input + 16 * i + 0, value.re, true);\r\n    dv.setFloat64(this.input + 16 * i + 8, value.im, true);\r\n  }\r\n  getInput(i: number): Complex {\r\n    this.checkDisposed();\r\n    const dv = new DataView(this.memory.buffer);\r\n    return {\r\n      re: dv.getFloat64(this.input + 16 * i + 0, true),\r\n      im: dv.getFloat64(this.input + 16 * i + 8, true),\r\n    };  \r\n  }\r\n  run(direction: number = 1): void {\r\n    this.checkDisposed();\r\n    this.api.run_fft(this.fft, this.input, this.output, direction);\r\n  }\r\n  runBlock(nCalls: number, direction: number = 1): number {\r\n    const start = performance.now();\r\n    for (let i = 0; i < nCalls; i++) {\r\n      this.api.run_fft(this.fft, this.input, this.output, direction);\r\n    }\r\n    const end = performance.now();\r\n    return (end - start) * 1e-3;\r\n  }\r\n  getOutput(i: number): Complex {\r\n    this.checkDisposed();\r\n    const dv = new DataView(this.memory.buffer);\r\n    return {\r\n      re: dv.getFloat64(this.output + 16 * i + 0, true),\r\n      im: dv.getFloat64(this.output + 16 * i + 8, true),\r\n    };\r\n  }\r\n\r\n  // TODO call this from the test-driver code\r\n  dispose() {\r\n    this.checkDisposed();\r\n    this.api.delete_fft(this.fft);\r\n    this.api.free(this.input);\r\n    this.api.free(this.output);\r\n    this.isDisposed = true;\r\n  }\r\n}\r\n\r\nexport const versions: Record<string, () => Promise<FFTFactory>> =\r\n  Object.fromEntries(\r\n    versionNames\r\n    .map(name => {\r\n      async function makeFactoryPromise(): Promise<FFTFactory> {\r\n        try {\r\n          const imported = await import(`../dst-wasm/${name}-wasm.js`);\r\n          const base64_version = imported.default;\r\n          const bytes = decodeBase64(base64_version);\r\n\r\n          const memory = new WebAssembly.Memory({initial: 2, maximum: 256});\r\n          // some implementations need more stack...\r\n          const stackSize = /^fft0[12]$/.test(name) ? (1 << 23) : (1 << 16);\r\n          const heap = makeHeap(memory, stackSize, {shouldSelfCheck: \"quiet\"});\r\n\r\n          const module = await WebAssembly.compile(bytes);\r\n          const envFuncImports =\r\n            WebAssembly.Module.imports(module).flatMap(({module, name, kind}) =>\r\n              module === \"env\" && kind === \"function\" ? [name] : []\r\n            );\r\n          const funcExports =\r\n            WebAssembly.Module.exports(module).flatMap(({name, kind}) =>\r\n              kind === \"function\" ? [name] : []\r\n            );\r\n          const circularFuncs = funcExports.filter(name => envFuncImports.includes(name));\r\n          // Under certain circumstances modules are unlinked in the sense\r\n          // that some functions are both imported and exported.\r\n          // The linkFuncs close this self-dependency at runtime.\r\n          // (This is less efficient than proper linking.)\r\n          const linkFuncs = Object.fromEntries(circularFuncs.map(name => [\r\n            name,\r\n            (...args: any[]) => (instance as any).exports[name](...args)\r\n          ]));\r\n\r\n          // Hack: If the WASM module wants to import functions whose names\r\n          // sound related to problem-handling, we simply provide such\r\n          // functions and hope that they will not be called.  But if they are,\r\n          // they will simply throw an exception.\r\n          const errorFuncs = Object.fromEntries(\r\n            envFuncImports.filter(name => /error|exception|throw/i.test(name))\r\n            .map(name => [\r\n              name,\r\n              () => {\r\n                throw new Error(`Error handling function \"${name}\" called from WASM`);\r\n              }\r\n            ])\r\n          )\r\n \r\n          // Most of our modules need only a few imports, but here are all the\r\n          // imports that might be needed by any module.\r\n          // TODO create module-specific import objects?\r\n          const imports: WebAssembly.Imports = {\r\n            env: {\r\n              ...errorFuncs,\r\n              ...linkFuncs,\r\n              ...heap,\r\n              // TODO use heap management from a (C/C++) library?\r\n              // but continue to use cos, sin from JS;\r\n              // (not sure about memset; probably from C lib)\r\n              _Znwm: heap.malloc, // new\r\n              _Znam: heap.malloc, // new[]\r\n              _ZdlPv: heap.free,  // delete\r\n              cos: Math.cos,\r\n              sin: Math.sin,\r\n              __stack_pointer: new WebAssembly.Global({value: 'i32', mutable: true}, stackSize),\r\n              __memory_base: 0,\r\n            },\r\n            \"GOT.func\": {\r\n              _ZNSt12length_errorD1Ev: new WebAssembly.Global({value: 'i32', mutable: true}, 0),\r\n            },\r\n            \"GOT.mem\": {\r\n              _ZTISt12length_error: new WebAssembly.Global({value: 'i32', mutable: true}, 0),\r\n              _ZTVSt12length_error: new WebAssembly.Global({value: 'i32', mutable: true}, 0),\r\n            }\r\n          };\r\n\r\n          const instance = await WebAssembly.instantiate(module, imports);\r\n          (instance.exports as any).__wasm_call_ctors?.();\r\n          const api: API = {...instance.exports as any, ...heap};\r\n          return (size: number): FFT => new FFTFromWASM(memory, api, size);\r\n        } catch (e) {\r\n          console.error(\"Problem while setting up WASM instance:\", e);\r\n          // debugger;\r\n          throw e;\r\n        }\r\n      }\r\n      return [name, makeFactoryPromise];\r\n    })\r\n  );\r\n","export const versionNames = `\r\n  fft60\r\n`.trim().split(/\\s+/);\r\n","import { Complex } from \"complex/dst/Complex\";\r\nimport { FFT, FFTFactory } from \"fft-api/dst\";\r\nimport decodeBase64 from \"base64/dst/decodeBase64.js\";\r\nimport { versionNames } from \"./info.js\";\r\n\r\nclass FFTFromWASMModule implements FFT {\r\n  private input: Float64Array;\r\n  private output: Float64Array;\r\n\r\n  private outputStart: number;\r\n  private cosinesStart: number;\r\n  private shuffledStart: number;\r\n  private fft : (size: number, shuffledStart: number, cosinesStart: number, outputStart: number) => void;\r\n  private ifft: (size: number, shuffledStart: number, cosinesStart: number, outputStart: number) => void;\r\n\r\n  constructor(\r\n    module: WebAssembly.Module,\r\n    public readonly size: number,\r\n  ) {\r\n    // TODO make this more generic\r\n    // The setup code here is quite specific for fft60.\r\n    // Either move it to a specific JS file for fft60 or even move it into\r\n    // the WASM module.\r\n    const n = size;\r\n    const shuffledSize = Math.max(1, n >>> 2);\r\n  \r\n    const memorySizeInBytes = 40 * n + 4 * shuffledSize;\r\n    const pageSize = 64 * 1024;  // The WebAssembly page size is 64 KiB.\r\n    const memorySizeInPages = Math.ceil(memorySizeInBytes / pageSize);\r\n    const memory = new WebAssembly.Memory({initial: memorySizeInPages, maximum: memorySizeInPages});\r\n  \r\n    const inputStart = 0;\r\n    const input = new Float64Array(memory.buffer, inputStart, 2*n);\r\n    const outputStart = inputStart + input.byteLength;\r\n    const output = new Float64Array(memory.buffer, outputStart, 2*n);\r\n    const cosinesStart = outputStart + output.byteLength;\r\n    const cosines = new Float64Array(memory.buffer, cosinesStart, n);\r\n    const shuffledStart = cosinesStart + cosines.byteLength;\r\n    const shuffled = new Int32Array(memory.buffer, shuffledStart, shuffledSize);\r\n    const dataEnd = shuffledStart + shuffled.byteLength;\r\n    if (dataEnd !== memorySizeInBytes) {\r\n      console.error(\"unexpected data size\", dataEnd, \"expected:\", memorySizeInBytes);\r\n    }\r\n\r\n    for (let i = 0; i < shuffledSize; i++) {\r\n      shuffled[i] = inputStart;\r\n    }\r\n    for (let len = shuffledSize, fStride = 1; len > 1; len >>>= 1, fStride <<= 1) {\r\n      const halfLen = len >>> 1;\r\n      for (let out_offset = 0; out_offset < shuffledSize; out_offset += len) {\r\n        const limit = out_offset + len;\r\n        for (let out_offset_odd = out_offset + halfLen; out_offset_odd < limit; out_offset_odd++) {\r\n          shuffled[out_offset_odd] += fStride * 16;\r\n        }\r\n      }\r\n    }\r\n  \r\n    const step = 2 * Math.PI / n;\r\n    for (let i = 0; i < n; i++) {\r\n      cosines[i] = Math.cos(i * step);\r\n    }\r\n\r\n    // TODO Pass the instance as constructor argument?\r\n    // This would make an instance usable for multiple sizes.\r\n    // The instance's memory would have to grow dynamically as needed.\r\n    // (AFAIK shrinking memory is not supported.)\r\n    const instance = new WebAssembly.Instance(module, {\r\n      env: {\r\n        memory,\r\n      },\r\n    });\r\n    const {exports} = instance;\r\n    const {fft, ifft} = exports as any;\r\n  \r\n    this.input = input;\r\n    this.output = output;\r\n    this.cosinesStart = cosinesStart;\r\n    this.shuffledStart = shuffledStart;\r\n    this.outputStart = outputStart;\r\n    this.fft = fft;\r\n    this.ifft = ifft;\r\n  }\r\n\r\n  setInput(i: number, value: Complex): void {\r\n    this.input[i * 2 + 0] = value.re;\r\n    this.input[i * 2 + 1] = value.im;\r\n  }\r\n  getInput(i: number): Complex {\r\n    return {\r\n      re: this.input[i * 2 + 0],\r\n      im: this.input[i * 2 + 1],\r\n    };  \r\n  }\r\n  run(direction: number = 1): void {\r\n    const fft = direction > 0 ? this.fft : this.ifft;\r\n    fft(this.size, this.shuffledStart, this.cosinesStart, this.outputStart);\r\n  }\r\n  runBlock(nCalls: number, direction: number = 1): number {\r\n    const fft = direction > 0 ? this.fft : this.ifft;\r\n    const start = performance.now();\r\n    for (let i = 0; i < nCalls; i++) {\r\n      fft(this.size, this.shuffledStart, this.cosinesStart, this.outputStart);\r\n    }\r\n    const end = performance.now();\r\n    return (end - start) * 1e-3;\r\n  }\r\n  getOutput(i: number): Complex {\r\n    return {\r\n      re: this.output[i * 2 + 0],\r\n      im: this.output[i * 2 + 1],\r\n    };  \r\n  }\r\n\r\n  dispose(): void {\r\n    // nothing to do since we have no stateful memory allocation\r\n  }\r\n}\r\n\r\nexport const versions: Record<string, () => Promise<FFTFactory>> =\r\n  Object.fromEntries(\r\n    versionNames.map(name => {\r\n      async function makeFactoryPromise(): Promise<FFTFactory> {\r\n        try {\r\n          const imported = await import(`../dst-wasm/${name}-wasm.js`);\r\n          const base64_version = imported.default;\r\n          const bytes = decodeBase64(base64_version);\r\n          const module = new WebAssembly.Module(bytes);\r\n          return (size: number): FFT => new FFTFromWASMModule(module, size);\r\n        } catch (e) {\r\n          console.error(\"Problem while setting up WASM instance:\", e);\r\n          // debugger;\r\n          throw e;\r\n        }\r\n      }\r\n      return [name, makeFactoryPromise];\r\n    })\r\n  );\r\n","const prefixKeys = \r\n  <T>(prefix: string, obj: Record<string, T>): Record<string, T> =>\r\n    Object.fromEntries(Object.entries(obj).map(([k, v]) => [prefix +k, v]));\r\n\r\nexport default prefixKeys;\r\n","const mapObject =\r\n  <T, U>(obj: Record<string, T>, f: (x: T, k: string, obj: Record<string, T>) => U): Record<string, U> =>\r\n    Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, f(v, k, obj)]));\r\n\r\nexport default mapObject;\r\n","const asPromise = <T>(x: T): Promise<T> => new Promise(resolve => resolve(x));\r\n\r\nexport default asPromise;\r\n","import { FFTFactory } from \"fft-api/dst\";\r\nimport { versions as tsVersions } from \"fft-ts/dst/api\";\r\nimport { versions as cppVersions } from \"fft-cpp/dst/api-js\";\r\nimport { versions as wasmVersions } from \"fft-cpp/dst/api-wasm\";\r\nimport { versions as mylangVersions } from \"fft-mylang/dst/api\";\r\n\r\nimport prefixKeys from \"./prefixKeys\";\r\nimport mapObject from \"./mapObject\";\r\nimport asPromise from \"./asPromise\";\r\n\r\nexport const versions: Record<string, Promise<FFTFactory>> = {\r\n  ...prefixKeys(\"TJ \", mapObject(tsVersions, asPromise)),\r\n  ...prefixKeys(\"CJ \", mapObject(cppVersions, func => func())),\r\n  ...prefixKeys(\"CW \", mapObject(wasmVersions, func => func())),\r\n  ...prefixKeys(\"MW \", mapObject(mylangVersions, func => func())),\r\n};\r\n","import makeTestData from \"./makeTestData\";\r\nimport sleep from \"./sleep\";\r\nimport { FFT, FFTFactory } from \"fft-api/dst\";\r\nimport { versions } from './versions';\r\nimport { BenchmarkState, ComputeArgs, WorkerMessage } from \"./benchmark-worker-interface\";\r\n\r\n\r\n// Adding \"webworker\" to compilerOptions.lib in tsconfig.json should make `self`\r\n// available, but it did not help.\r\n// So we make \"self\" available the brute-force way:\r\n// TODO find a cleaner solution.\r\ndeclare const self: any;\r\n\r\nfunction emit(message: WorkerMessage) {\r\n  self.postMessage(message);\r\n}\r\n\r\nfunction emitValue(version: string, blockNo: number, value: BenchmarkState) {\r\n  emit({ type: \"value\", version, blockNo, value});\r\n}\r\n\r\nfunction emitDone() {\r\n  emit({ type: \"done\" });\r\n}\r\n\r\nself.onmessage = ({ data }: { data: ComputeArgs }) => {\r\n  compute(data);\r\n};\r\n\r\nasync function compute({\r\n  testVersionList, nBlocks, pause, blockSize, n, versionMajor\r\n}: ComputeArgs): Promise<void> {\r\n  const data = makeTestData(n);\r\n\r\n  const runBlock = async (name: string, fft: FFT, i: number) => {\r\n    if (pause > 0) {\r\n      emitValue(name, i, \"pause\");\r\n      await sleep(pause * 1e3);\r\n    }\r\n    emitValue(name, i, \"run\");\r\n    const start = performance.now();\r\n    for (let j = 0; j < blockSize; j++) {\r\n      fft.run(1);\r\n    }\r\n    const time = (performance.now() - start) * 1e-3 / blockSize;\r\n    emitValue(name, i, time);\r\n  }\r\n\r\n  const versionEntries = [];\r\n  for (const name of testVersionList) {\r\n    // TODO safeguard against failing or slow `await`?\r\n    const version: FFTFactory = await versions[name];\r\n    const fft = version(n);\r\n    for (let i = 0; i < n; i++) {\r\n      fft.setInput(i, data[i]);\r\n    }\r\n    versionEntries.push({name, fft});\r\n  }\r\n  if (versionMajor) {\r\n    for (const { name, fft } of versionEntries) {\r\n      for (let i = 0; i < nBlocks; i++) {\r\n        await runBlock(name, fft, i);\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 0; i < nBlocks; i++) {\r\n      for (const { name, fft } of versionEntries) {\r\n        await runBlock(name, fft, i);\r\n      }\r\n    }\r\n  }\r\n  emitDone();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [48], function() { return __webpack_require__(396); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"13\":\"334ed43e\",\"45\":\"0cac6bcf\",\"48\":\"5a6e28c3\",\"81\":\"54e0084f\",\"136\":\"bcf4ab91\",\"144\":\"c9a69ff7\",\"203\":\"0a2d530d\",\"206\":\"3e0b3a60\",\"216\":\"2dae6183\",\"292\":\"459938a7\",\"406\":\"7ffc7413\",\"498\":\"90006d72\",\"539\":\"50b0e11b\",\"546\":\"e68c5106\",\"553\":\"62deeb44\",\"599\":\"a4c3f6e8\",\"716\":\"7bb4bfd3\",\"827\":\"fa6faf48\",\"830\":\"137e6b0d\",\"844\":\"caec3096\",\"878\":\"5e97c74b\",\"917\":\"0fece197\",\"995\":\"1bb8d4ab\",\"997\":\"0747d060\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/fft/build/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t396: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkfft_browser_test\"] = self[\"webpackChunkfft_browser_test\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(48).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","plus","x","y","re","im","minus","times","timesScalar","rot90","expi","Math","cos","sin","length","f","Array","from","_","i","n","filledArray","random","ms","setTimeout","makeComplexArray","res","Float64Array","ims","complexArrayLength","a","getComplex","setComplex","copyComplexArray","src","dst","set","TAU","PI","fft","direction","len","halfLen","even","odd","k","even_out","odd_out","out","rotated","fallbackFFT","c0","c1","rotQ","q","s","fft_prepares","fft01","fft02","rotations","rStride","fft_prepare_raw","fft03","recur","offset","fStride","doubleFStride","fft04","out_offset","out_offset_odd","fft05","permute","Uint32Array","preRecur","fft06","fft07","merge","fft08","fft09","fft10","limit","fft11","fft12","nMask","rOffset","r","i0","i1","a0","a1","b0","b1","fft13","quarterN","cosines","qNMask","logQN","log2","hi","lo","fft14","rOffset1","fft14a","fft14b","fft15","fft15a","z0","z1","fft15b","fft15c","Uint8Array","Uint16Array","fft15d","precomputed","fft16","fft40","quarterTurn","halfRStride","len2","out_offset_ee","out_offset_eo","out_offset_oe","out_offset_oo","ee","eo","oe","oo","ee1","eo1","oe1","oo1","fft44","rStride1","rStride2","rStride3","rOffset2","rOffset3","r1","r2","r3","i2","i3","a2","a3","b2","b3","c2","aux","c3","d0","d1","d2","d3","k1","fft47","negDirection","rotation","k0","fft98","half_n","quarter_n","t","j","cosTable","ps","cs","b","half_size","tableStride","rSign","rAbs","b_rotated","fft98a","fft99","fft99a","fft99b","halfN","fft99c","quarterLen","z2","z3","FFT_API","size","fft_prepare","this","input","output","fftRun","index","value","nCalls","start","performance","now","versions","fromEntries","entries","name","scalarType","ComplexArray","instance","p","_malloc","_free","getValue","versionNames","trim","split","FFTFromInstance","_prepare_fft","setValue","_run_fft","end","imported","factory","default","chars","values","rests","base64String","replace","restSize","fullBlocksLimit","outputFullBlocksLimit","outputRestSize","blockValue","makeHeap","memory","shouldSelfCheck","allocatedRegions","Map","freeRegions","selfCheck","situation","fail","strings","texts","push","JSON","stringify","join","buffer","byteLength","allRegions","free","sort","console","log","regFree","ensureMemoryUntil","diff","grow","malloc","candidateIdx","splice","candidate","addr","get","delete","ri","FFTFromWASM","api","prepare_fft","isDisposed","checkDisposed","dv","DataView","setFloat64","getFloat64","run_fft","delete_fft","base64_version","bytes","decodeBase64","WebAssembly","Memory","initial","maximum","stackSize","test","heap","compile","envFuncImports","Module","imports","flatMap","kind","funcExports","circularFuncs","filter","includes","linkFuncs","errorFuncs","env","_Znwm","_Znam","_ZdlPv","__stack_pointer","Global","mutable","__memory_base","_ZNSt12length_errorD1Ev","_ZTISt12length_error","_ZTVSt12length_error","instantiate","__wasm_call_ctors","error","FFTFromWASMModule","shuffledSize","max","memorySizeInBytes","memorySizeInPages","ceil","outputStart","cosinesStart","shuffledStart","shuffled","Int32Array","dataEnd","step","Instance","ifft","prefix","obj","v","prefixKeys","mapObject","tsVersions","asPromise","cppVersions","func","wasmVersions","mylangVersions","emit","message","self","postMessage","emitValue","version","blockNo","type","emitDone","compute","testVersionList","nBlocks","pause","blockSize","versionMajor","data","makeTestData","runBlock","sleep","run","time","versionEntries","setInput","onmessage","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","key","getter","__esModule","d","definition","defineProperty","enumerable","chunkId","all","reduce","promises","u","miniCssF","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next"],"sourceRoot":""}